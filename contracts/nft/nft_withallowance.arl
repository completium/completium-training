archetype simpleNFT(admin : address)

asset ledger {
  id    : nat;
  owner : address;
}

asset allowance identified by  addr_owner addr_spender {
  addr_owner       : address;
  addr_spender     : address;
}

entry %transfer (%from : address, %to : address, tid : nat) {
  if caller <> %from then begin
    dorequire (allowance.contains((%from, caller)), "CALLER NOT ALLOWED");
    allowance.remove(((%from, caller)))
  end;
  ledger[tid].owner := %to;
}

entry mint(o : address) {
  called by admin
  effect {
    ledger.add({ id = ledger.count(); owner = o })
  }
}

entry allow (spender : address, tid: nat) {
  called by ledger[tid].owner
  failif {
    r1 with "UNSAFE ALLOWANCE" : allowance.contains((caller, spender));
  }
  effect {
    allowance.addupdate((caller, spender), {})
  }
}

specification entry %transfer(%from : address, %to : address, tid : nat) {
  /* postcondition p1 {
    balance = 0tz
  } */
  postcondition p2 {
    %from = %to -> ledger = before.ledger
  }
  postcondition p3 {
    %from <> %to ->
      let some token = ledger[tid] in
      token.owner = %to
      otherwise false
  }
  postcondition p4 {
    forall token in ledger,
      token.owner <> %from ->
      token.owner <> %to ->
      let some btoken = before.ledger[token.id] in
        btoken = token
      otherwise false
  }
  postcondition p5 {
    caller <> %from -> not allowance.contains((%from, caller))
  }
}

