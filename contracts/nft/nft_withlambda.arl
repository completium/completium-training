archetype nft(admin : address)

asset ledger {
  id         : nat;
  owner      : address;
}

record auction {
  bestbid    : tez = 0tz;
  bestbidder : option<address> = none;
  endofbid   : date = now;
}

variable auctions : map<nat, auction> = []

entry %transfer (%from : address, %to : address, tid : nat) {
  called by ledger[tid].owner
  effect {
    ledger[tid].owner := %to;
  }
}

entry mint(o : address, p : tez) {
  called by admin
  effect {
    ledger.add({ id = ledger.count(); owner = o })
  }
}

entry upforsale (tid : nat, initprice : tez) {
  called by ledger[tid].owner
  effect {
    auctions := put(auctions, tid,{
      bestbid  = initprice;
      endofbid = (now + 5m)
    });
  }
}

entry bid(tid : nat) {
  require {
    r1 otherwise "Asset Not For Sale": contains(auctions, tid);
    r2: now < auctions[tid].endofbid;
    r3: transferred > auctions[tid].bestbid;
  }
  effect {
    match auctions[tid].bestbidder with
    | some b ->
      transfer auctions[tid].bestbid to b
    | none -> ()
    end;
    var %end = auctions[tid].endofbid;
    auctions := put(auctions, tid, {
      bestbidder = some(caller);
      bestbid = transferred;
      endofbid = (if %end - now < 2m then %end + 2m else %end)
    })
  }
}

entry claim (tid : nat) {
  require {
    r4 otherwise "Bid Period Is Still On": now > auctions[tid].endofbid;
    r5: contains(auctions, tid);
  }
  effect {
    match auctions[tid].bestbidder with
    | some b -> begin
      transfer auctions[tid].bestbid to ledger[tid].owner;
      auctions := update(auctions, tid, none<auction>);
      end
    | none -> ()
    end
  }
}
